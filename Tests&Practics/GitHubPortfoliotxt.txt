СКВОЗНОЙ ПРИМЕР ПРОЕКТА
На протяжении всего модуля мы будем работать над небольшим учебным проектом — задачей очистки данных о квартирах в Москве из модуля «PY-14. Очистка данных».
Наш проект продемонстрирует применение различных методов очистки данных на каждом из её этапов:
работа с пропусками,
работа с выбросами,
работа с дубликатами.
Начальная структура проекта будет следующей (в дальнейшем она немного изменится):
DataCleaningProject
    ├─data
	    └─sber_data.csv
    │
    └─images
         └─boxplot.png
         └─data_cleaning.png
         └─example_outliers.png
	    └─method_sigm.png
    │
    └─outliers_lib
         └─find_outliers.py
         └─README.md
    data_cleaning.ipynb
Где:
data — папка с исходными данными (у нас это данные о квартирах в Москве);
images — папка с изображениями, необходимыми для проекта;
outliers_lib — папка со вспомогательными модулями для поиска выбросов (find_outliers.py) и описание этих модулей (файл README.md);
data_cleaning_example.ipynb — Jupyter-ноутбук, содержащий основной код проекта, в котором демонстрируются методы и подходы решения задач очистки данных.
ЧТО ТАКОЕ ЯЗЫК РАЗМЕТКИ?
Язык разметки — это специальный компьютерный язык для описания оформления и строения документа.
Представим на некоторое время, что языков разметки не существует, а перед нами как перед разработчиками стоит простая задача: в предложении
Markdown — простой язык разметки.
требуется сделать слово «Markdown» полужирным (Markdown).
Если мы введём какую-то управляющую конструкцию, которая в режиме чтения не будет отображаться явно, но будет преобразована в оформление, мы сможем достичь примерно такого результата: <strong> Markdown </strong> — простой язык разметки.
<> - тэги.  Список самых используемых на сегодняшний день языков разметки 
ЯЗЫК РАЗМЕТКИ MARKDOWN

Markdown — простой и понятный язык разметки для оформления документации, который является упрощённой версией HTML. Благодаря своей простоте он используется во множестве сервисов — как специальных (для разработчиков), так и направленных на пользователей.

Markdown-разметка (md-разметка) используется для написания документов, блогов, комментариев. Большинство IDE преобразуют md-разметку, с помощью которой разработчик оформляет текст.
Логотип Markdown
Мы используем этот язык при работе с текстовыми ячейками в Jupyter-ноутбуках. Для этого при создании новой ячейки мы можем выбрать Markdown, в новой ячейке на языке разметки написать нужный нам текст, затем выполнить ячейку как обычную ячейку с кодом и получить результат.
Текст на языке Markdown
Отображение текста пользователю
Язык Markdown поддерживается многими мессенджерами, например Telegram и Slack:
Файлы с разметкой Markdown имеют расширение .md. Существует огромное количество редакторов, расширений и сервисов, поддерживающих Markdown.

Например, знакомый нам VS Code, а также большинство IDE и редакторов кода поддерживают вёрстку md-файлов с одновременным просмотром результата. Сервис GitHub, с которым мы будем работать, и другие хостинги веб-проектов в режиме просмотра отображают не содержимое файлов README.md, а обработанную разметку. Эти файлы — лицо вашего проекта. В них разработчики описывают, о чём их проект, как работает код, какие действия необходимо произвести, чтобы запустить приложение/программу, и т. д.
Ниже представлен пример отображения разметки на языке Markdown, написанной в файле README.md в репозитории. Вы можете самостоятельно посмотреть на содержимое файла и увидеть, как представленная свёрстанная стартовая страница выглядит в виде текста. Ниже представлен пример отображения разметки на языке Markdown, написанной в файле README.md в репозитории. Вы можете самостоятельно посмотреть на содержимое файла и увидеть, как представленная свёрстанная стартовая страница выглядит в виде текста https://github.com/laravel/laravel. Существуют различные сервисы для создания документов именно с помощью md-разметки, например hackmd.io. 
3. Синтаксис Markdown
В Markdown разделителем абзацев служит пустая строка. Если вы знакомы с языком HTML, то при использовании Markdown можно воспользоваться HTML-тегами. Например, тег <strong> позволяет выделять текст полужирным. Примечание. Список всех HTML-тегов вы можете найти здесь https://html5book.ru/html-tags/. 
ШРИФТ
Очень часто требуется сделать акценты на каких-то элементах текста. Самый простой способ — использовать наклонный (курсивный) и полужирный шрифт.
Наклонное и полужирное начертание в Markdown задаются при помощи символов * и _:
один символ — для наклонного текста (_italic_, *italic*);
два символа — для жирного текста (__strong__, **strong**);
три — для наклонного и жирного одновременно (***жирный и наклонный***).
Пример использования наклонного и полужирного шрифта
ЗАГОЛОВКИ
Любая хорошая статья (а описание проекта можно считать статьёй) должна иметь логические разделы и подразделы. Как правило, начало разделов выделяют заголовками.
В синтаксисе Markdown заголовки отмечаются символом # (от одного до шести штук) в начале строки. Размер шрифта каждого следующего уровня меньше предыдущего:
# Заголовок h1
## Заголовок h2
### Заголовок h3
#### Заголовок h4
##### Заголовок h5
###### Заголовок h6
Пример использования заголовков для оформления статьи
Примечание. Часто при написании текста мы стремимся отцентрировать заголовки разделов. Для этого в Markdown можно воспользоваться тегом <center>:
# <center> Заголовок h1 </center>
Пример использования заголовков с центрированием для оформления статьи
Полезно выделять структуру текста с помощью горизонтальных линий. VS Code автоматически рисует горизонтальную линию после заголовка первого уровня, но можно добавить эту линию вручную с помощью символа ---:
## Заголовок h2
---
## Заголовок h2
Пример использования заголовков с центрированием и горизонтальной линией для оформления статьи
СПИСКИ
Списки — способ представить упорядоченную информацию. Например, это может быть список зависимостей программы (библиотек), которые необходимо установить перед её запуском, или некоторый разработанный нами алгоритм, который мы хотим описать в виде шагов.
Для разметки ненумерованных списков можно использовать символы *, - или + — результат будет один:
+ элемент 1
- элемент 2
* элемент ...
Вложенные пункты создаются двумя или более пробелами перед маркером пункта:
* элемент
  * вложенный элемент 2.1
  * вложенный элемент 2.2
Для разметки нумерованных списков ставится положительное число с точкой:
1. элемент 1
2. элемент 2
  2.1. элемент 3
  2.2. элемент 3
3. элемент 4
Нумерация списка начинается с того числа, которое стоит первым на уровне.
В отличие от ненумерованных списков, в нумерованных перед элементами вложенного списка ставится три пробела.
ССЫЛКИ И ИЗОБРАЖЕНИЯ
При описании своего проекта нередко хочется добавить ссылки на дополнительные источники — статьи, книги, файлы или изображения.
Ссылки создаются комбинацией квадратных и круглых скобок: в квадратных скобках указывается отображаемый текст ссылки, а в круглых — URL-адрес или путь до файла, на который вы ссылаетесь. Ссылки могут быть обычными (без подсказок) или с подсказками, которые всплывают при наведении курсором на ссылку:
без подсказки — [текст ссылки](http://example.com/link);
c подсказкой — [текст ссылки](http://example.com/link "Подсказка").
Пример использования ссылок для оформления списка литературы
Для отображения изображений перед квадратными скобками ставится восклицательный знак:
![](https://i.imgur.com/3uj9teq.png)
В квадратные скобки при этом записывается текст, который отображается, если картинка по каким-то причинам недоступна.
Другой вариант вставки изображений — использовать тег <img> со специальными атрибутами. Например, атрибут src устанавливает источник изображения (путь до файла или URL-ссылка), по которому будет происходит чтение изображения, а атрибуты width и height позволяют установить ширину и высоту изображения в пикселях или процентах от исходного изображения:
<img src=https://i.imgur.com/3uj9teq.png width=500px height=30%>
Пример использования ссылок для вставки изображений
ПРОГРАММНЫЙ КОД И ЦИТИРОВАНИЕ
Когда мы реализуем некоторый проект, представляющий собой набор функций или классов, нам важно донести до конечного пользователя, как работать с нашим проектом, например показать, как использовать ту или иную функцию из нашего кода. То есть нам нужно вставить часть кода в Markdown-файл с описанием.
Для выделения программного кода используется обратный апостроф:
одинарный парный — для вставки строки кода в текст;
двойной парный — для вставки небольшого участка кода, содержащего одинарный апостроф, в текст;
тройной парный — для вставки блока программного кода.
```python
lst = [10, 34, 21, 21, 3]
summa = sum(lst)
```
Для оформления цитат используется знак «больше» (>):
> Цитируемый текст
ФОРМУЛЫ
Когда в проекте есть математическая составляющая, важно отразить её в описании.
Вставка математических формул в Markdown осуществляется с помощью специальной библиотеки KaTeX. Давайте разберём синтаксис.
Чтобы начать использовать KaTeX в Markdown, необходимо воспользоваться символом $. Если обрамить формулу с обеих сторон одним символом $, то её можно встроить в текст, а если двумя — формула автоматически центрируется.
Например, следующий синтаксис
Пусть задано выражение:
$$a = b +c,$$
где $a=0$
Пусть задано выражение:
где 
В формулах встречаются символы разных типов: переменные, операции, функции и др. Иногда переменные могут быть набраны латинскими или греческими буквами. Латинские буквы набираются с клавиатуры, а для греческих есть специальные команды, которые выражаются через символ \. Например:
$\alpha$ — 
$\gamma$ — 
$\sigma$ — 
Степени и индексы набираются с помощью символов ^ и _ соответственно. Если символов, которые нужно поместить в степень или индекс, несколько, то они выделяются фигурными скобками. Например:
$a^2$ — 
$b_{ij}$ — 
$w^{ij}_n$ — 
Для того чтобы создать «двухэтажную» дробь, можно воспользоваться оператором \frac с двумя параметрами, которые передаются в фигурных скобках (числитель и знаменатель). Например:
$\frac{1+x}{n}$ — 
Мы рассмотрели только основные математические операции в Markdown, на самом деле их гораздо больше: суммы, производные, интегралы и т. д. Однако изучать и запоминать их всех вовсе не обязательно. Всегда можно найти, как записать то или иное математическое соотношение, в документации по LaTeX.
Пример оформления математических формул
ПРИМЕР ОФОРМЛЕНИЯ ФАЙЛА README.MD
Давайте рассмотрим процесс создания Markdown-файла на примере описания к проекту.
Напомним, что в качестве мини-проекта берём кейс по очистке данных датасета о домах в Москве от Сбера, который мы рассматривали в модуле «PYTHON-14. Очистка данных».
В том модуле мы рассматривали методы поиска выбросов — метод межквартильного размаха и метод z-отклонений. Для их реализации мы создали функции на Python. Давайте оформим мини-библиотеку, в которую поместим эти функции, чтобы в дальнейшем их импортировать.
GIT/GITHUB
Система управления версиями (англ. Version Control System) — это программное обеспечение, которое позволяет управлять состояниями изменяющейся информации. Благодаря таким системам несколько людей могут работать с файлами, сохранять их версии, перемещаться между версиями и откатывать изменения.
Репозиторий — это хранилище каких-либо данных. В случае с системой контроля версий, репозиторий — это хранилище, содержащее программный код и другие атрибуты (например, данные) IT-проекта.
Основная задача системы управления версиями — фиксация различных изменений, произведённых с файлами в репозитории, и возможность отслеживать эти изменения и управлять ими. Например, если произошло обновление программного кода, которое губительно повлияло на работу программы, можно отследить, кто, где и когда произвёл эти изменения, а при необходимости — отменить их. Кроме того, при использовании системы контроля версий есть возможность создавать различные резервные копии программного кода.
Часто понятие «система контроля версий» ассоциируется только с Git. Однако Git — не первая и не единственная такая система. Для расширения кругозора предлагаем вам познакомимся со знаковыми представителями в этой статье.https://habr.com/ru/articles/478752/
ТИПЫ СИСТЕМ КОНТРОЛЯ
01.ЛОКАЛЬНЫЕ - Локальная система хранит все файлы на одном конкретном устройстве (например, на ПК) и контролирует их изменения на нём. В локальной системе удобно работать, если вы один, но проблематично, когда у вас команда из нескольких человек.
02 Централизованные- В централизованной системе весь проект существует в единственном экземпляре и хранится на главном удалённом сервере. Доступ к серверу осуществляется через специальное клиентское приложение, в котором разработчики напрямую обновляют состояние проекта.
Преимущество такой системы в том, что ей удобно управлять из-за наличия только одного центрального репозитория. Но из-за привязанности этого репозитория к одному серверу любой сбой или взлом может безвозвратно уничтожить все файлы проекта.
03 Распределённые - В распределённой системе контроля версий есть один удалённый репозиторий (как правило, в облаке) и множество локальных. Удалённый репозиторий можно считать центральным, но только условно.
При этом локальные и удалённые репозитории синхронизированы, то есть разработчики работают с локальной копией общего репозитория, причём все копии проекта, включая удалённую, являются равнозначными. После внесения изменений в локальную копию проекта они отправляются на удалённый репозиторий.
Преимущество такого подхода заключается в автономии разработчика при работе над проектом, общей гибкости системы и повышении надёжности благодаря тому, что каждый разработчик имеет локальную копию центрального репозитория.
Недостаток — сложность управления проектом из-за возможности возникновения конфликтов, о которых мы поговорим далее в модуле.
СИСТЕМА КОНТРОЛЯ ВЕРСИЙ GIT
Как мы отмечали ранее, Git — распределённая система управления версиями. Кроме того, в Git предусмотрен механизм ветвления, о котором мы поговорим далее. Если не вдаваться в подробности, то разработчики могут создавать отдельные ветки проекта и обмениваться изменениями до их объединения в официальную ветвь. В Git практически все операции совершаются локально, то есть на вашем компьютере, сеть используется только для операций обмена с удалёнными репозиториями.

Со временем Git развился в простую, быструю, эффективную систему контроля версий. Для него были разработаны:

Графические интерфейсы (для удобства пользователей).
Однако максимально эффективной работы можно добиться, комбинируя текстовые команды и использование возможностей GUI, поэтому знание текстовых команд тоже важно для разработчика.

Git-хостинги, реализующие механизм облачного удалённого репозитория. Наиболее популярны на сегодня:
GitHub,
Bitbucket,
GitLab.

GITHUB — ХОСТИНГ IT-ПРОЕКТОВ
GitHub — наиболее популярный хостинг для IT-проектов. На нём хранятся миллионы удалённых репозиториев как небольших команд, так и крупных корпораций. Отличительная особенность GitHub — лёгкое создание форков. Среди возможностей этого IT-хостинга, кроме возможностей системы контроля версий, есть ведение документации (wiki) проекта, трекинг задач (issues), приём пожертвований. Небольшие проекты и проекты с открытым исходным кодом имеют те же возможности на GitHub, что и крупные коммерческие проекты, но для них использование хостинга бесплатно.
СОЗДАНИЕ УДАЛЁННОГО РЕПОЗИТОРИЯ
Для создания репозитория на GitHub используйте кнопку New на главной странице или на странице со списком репозиториев.
После создания удалённого репозитория необходимо связать проект с ним.
Мы можем связать наш локальный проект с этим репозиторием.
Примечание. По умолчанию в удалённом репозитории главная ветка называется main. Однако в Git репозитории именуются как master. Из-за этого могут возникать трудности и необходимость объединять эти ветки при работе над проектами. Чтобы избежать этого, мы рекомендуем сменить название веток в GitHub-репозиториях на master. Для этого в настройках GitHub зайдите в раздел Repositories и смените имя ветки в разделе Repository default branch.
СОЗДАЁМ УДАЛЁННЫЙ РЕПОЗИТОРИЙ ПРОЕКТА
Давайте создадим удалённый репозиторий для нашего проекта по очистке данных. Репозиторий пустой файлы README и GITIGNORE не добавляем пока.
"C:\Users\dlokt\VSProjects\Python\SkFactMaterials\RemoteReposGITHUB.mp4"
5. Git. Основные операции
✍ Мы подготовили свой удалённый репозиторий, однако для начала нам нужно разобраться с локальным. Для этого необходимо подробнее изучить основные операции Git. После этого мы свяжем локальный репозиторий с удалённым и синхронизируем их.
Зафиксируем терминологию, которой мы будем оперировать. Ключ к пониманию концепции Git — знание о «трёх деревьях».

Рабочая директория — файловая система проекта (те файлы, с которыми вы работаете).
Индекс — список отслеживаемых Git-файлов и директорий, промежуточное хранилище изменений (редактирование, удаление отслеживаемых файлов).
Директория .git/ — в этой локальной директории хранятся все данные контроля версий проекта (вся история разработки — коммиты, ветки, теги и пр.).

Перейдём к рассмотрению основных команд. Все они выполняются в терминале VS Code.
Примечание. Сначала мы познакомимся с синтаксисом команд, обсудим, для чего они предназначены и как устроены, а затем в скринкасте рассмотрим их применение на практике. Чтобы использовать функционал системы контроля версий Git, в командной строке используется команда git. Общий синтаксис выглядит следующим образом:
git <команда> <аргументы команды>
    git config
Команда config предназначена для настройки параметров Git на вашем компьютере.
Например, первое, что вам следует сделать после установки Git — указать ваше имя и адрес электронной почты. Это важно, потому что каждый коммит в Git содержит эту информацию и она не может быть далее изменена. Без указания этой информации основные команды Git будут работать, но коммиты будут создаваться без информации об авторе, что может вызвать трудности при совместной работе.
Если вы не сделали этого ранее, когда устанавливали Git, или захотели поменять настройки, рекомендуем сделать это сейчас. Для этого необходимо указать ключ --global (глобальные изменения) и передать в команду аргументы user.name и user.email:
    git config --global user.name "Your Name"
    git config --global user.email "your_email@whatever.com"
Примечание. Следующая команда выведет список всех ваших настроек, включая имя и почту:
git config –-list

   git init
Данная команда инициализирует локальный репозиторий. По сути, она создаёт пустой репозиторий на вашем компьютере.
Если смотреть «под капот» и разбираться в деталях, то инициализация репозитория — это создание в текущей директории новой поддиректории с именем .git, содержащей все необходимые файлы репозитория — структуру Git-репозитория.
Обратите внимание, что репозиторий инициализируется именно в той директории, в которой вы вызываете команду init! Следите за текущей директорией в командной строке.
Пример (создаём репозиторий из текущей директории):
git init
Initialized empty Git repository in A:/Курс DS-3.0/GIT-1. Markdown и Git для создания портфолио/DataCleaningProject/.git/
Примечание. Чтобы посмотреть на содержимое папки .git в Windows, в проводнике нужно отобразить скрытые папки. Для этого в разделе «Вид» нужно поставить галочку напротив пункта «Скрытые элементы»:
"C:\Users\dlokt\VSProjects\Python\SkFactMaterials\asset-v1_SkillFactory+DST-3.0+28FEB2021+type@asset+block@MDN_GIT_5_1.png"
Примечание. Если удалить папку .git, вы удалите репозиторий и всю историю изменений вашего проекта.
     git clone
Команда clone — другой вариант инициализации репозитория из уже существующего с помощью копирования. Её общий синтаксис:
    git clone [ссылка на репозиторий]
Данная операция пригодится вам, если все файлы вашего проекта уже где-то существуют.
Клонировать можно как локальный (находящийся на вашем компьютере), так и удалённый (находящийся на GitHub) репозиторий.
Пример:  git clone https://github.com/SkillfactoryDS/example
      git add
Команда add добавляет файл (папку с файлами) в индекс (индекс- промежуточная область, куда добавляются изменения перед коммитом, сами файлы остаются пока в рабочей директории; иногда говорят «индексирует»), то есть добавляет его в список отслеживаемых для системы контроля версий. Нужно указать в аргументах, какой файл или папку мы хотим добавить.
Примеры:
git add README.md — добавляет файл README.md в индекс.
git add data/ — добавляет папку data и всё её содержимое в индекс.
Чаще всего нам нужно добавить все файлы в текущем каталоге в индекс (кроме игнорируемых, о которых мы поговорим ниже). Для этого используется команда
git add .       Символ точки здесь означает текущую директорию, то есть мы добавляем в индекс все папки и файлы из текущей директории.

     git reset
Как вы уже наверное догадались, что данная команда противоположна предыдущей — она позволяет убрать файлы (папки с файлами) из списка отслеживаемых (из индекса)
Примеры: git reset README.md — удаляет файл README.md из индекса.     git reset data/ — удаляет папку data из индекса.
Чтобы убрать из индекса все файлы из текущей директории, используйте точку:    git reset .

    git commit
Пожалуй, самая главная операция системы Git — это commit (коммит).
Коммит — это операция сохранения набора изменений, сделанного в рабочей директории с момента предыдущего коммита. Коммит неизменен, его нельзя отредактировать — можно только отменить.
При выполнении команды commit изменения всех файлов, внесённые в индекс, фиксируются в репозитории. Если вы изменили файл, но не добавили его в индекс, эти изменения не попадут в коммит.
У всех коммитов (кроме самого первого) есть один или более родительских коммитов, поскольку коммиты хранят изменения от предыдущих состояний. Важно понимать, что Git не сохраняет файлы полностью при каждом коммите — он сохраняет только изменения, которые произошли в новом коммите. То есть если вы изменили одну строку кода в файле example.py, то при фиксации изменений на вашем компьютере появится не ещё один такой же файл, а только информация о том, что в этом файле было изменено.
Команда commit откроет текстовый редактор для ввода сообщения коммита. Также эта команда принимает несколько аргументов:
-m позволяет написать сообщение вместе с командой, не открывая текстовый редактор.
Обычно в сообщении указывается задача, которая решается этим обновлением, например «инициализация», «добавление счетов» или «исправление ошибки создания счёта».
Пример:
git commit -m "fixed bag in function clean_data"
-a переносит все отслеживаемые файлы в область подготовленных файлов и включает их в коммит.
Пример:
git commit -a -m "fixed bag in function clean_data"
--amend заменяет последний коммит новым изменённым коммитом, что бывает полезно, если вы неправильно набрали сообщение последнего коммита или забыли включить в него какие-то файлы.
Каждый коммит содержит уникальную контрольную сумму (хеш) — идентификатор, который Git использует, чтобы ссылаться на коммит. Для отслеживания истории в папке .git есть файл HEAD.
HEAD — это указатель (то есть ссылка на один из коммитов), главное назначение которого — определять, в каком состоянии находится рабочая директория. На какой коммит указывает HEAD, в таком состоянии файлы и находятся в рабочей области.
Зная HEAD (текущий действующий коммит), мы можем перемещаться по истории коммитов. "C:\Users\dlokt\VSProjects\Python\SkFactMaterials\asset-v1_SkillFactory+DST-3.0+28FEB2021+type@asset+block@MDN_GIT_5_2.png"
Чтобы посмотреть, на какой из коммитов указывает HEAD в данный момент, можно открыть файл HEAD в текстовом редакторе или использовать команду cat-file с ключом -p (от слова print). Пример:
git cat-file -p HEAD
Как перемещаться по этой истории, мы расскажем далее, а пока давайте закрепим знания, выполнив несколько заданий.
