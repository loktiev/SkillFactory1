СКВОЗНОЙ ПРИМЕР ПРОЕКТА
На протяжении всего модуля мы будем работать над небольшим учебным проектом — задачей очистки данных о квартирах в Москве из модуля «PY-14. Очистка данных».
Наш проект продемонстрирует применение различных методов очистки данных на каждом из её этапов:
работа с пропусками,
работа с выбросами,
работа с дубликатами.
Начальная структура проекта будет следующей (в дальнейшем она немного изменится):
DataCleaningProject
    ├─data
	    └─sber_data.csv
    │
    └─images
         └─boxplot.png
         └─data_cleaning.png
         └─example_outliers.png
	    └─method_sigm.png
    │
    └─outliers_lib
         └─find_outliers.py
         └─README.md
    data_cleaning.ipynb
Где:
data — папка с исходными данными (у нас это данные о квартирах в Москве);
images — папка с изображениями, необходимыми для проекта;
outliers_lib — папка со вспомогательными модулями для поиска выбросов (find_outliers.py) и описание этих модулей (файл README.md);
data_cleaning_example.ipynb — Jupyter-ноутбук, содержащий основной код проекта, в котором демонстрируются методы и подходы решения задач очистки данных.
ЧТО ТАКОЕ ЯЗЫК РАЗМЕТКИ?
Язык разметки — это специальный компьютерный язык для описания оформления и строения документа.
Представим на некоторое время, что языков разметки не существует, а перед нами как перед разработчиками стоит простая задача: в предложении
Markdown — простой язык разметки.
требуется сделать слово «Markdown» полужирным (Markdown).
Если мы введём какую-то управляющую конструкцию, которая в режиме чтения не будет отображаться явно, но будет преобразована в оформление, мы сможем достичь примерно такого результата: <strong> Markdown </strong> — простой язык разметки.
<> - тэги.  Список самых используемых на сегодняшний день языков разметки 
ЯЗЫК РАЗМЕТКИ MARKDOWN

Markdown — простой и понятный язык разметки для оформления документации, который является упрощённой версией HTML. Благодаря своей простоте он используется во множестве сервисов — как специальных (для разработчиков), так и направленных на пользователей.

Markdown-разметка (md-разметка) используется для написания документов, блогов, комментариев. Большинство IDE преобразуют md-разметку, с помощью которой разработчик оформляет текст.
Логотип Markdown
Мы используем этот язык при работе с текстовыми ячейками в Jupyter-ноутбуках. Для этого при создании новой ячейки мы можем выбрать Markdown, в новой ячейке на языке разметки написать нужный нам текст, затем выполнить ячейку как обычную ячейку с кодом и получить результат.
Текст на языке Markdown
Отображение текста пользователю
Язык Markdown поддерживается многими мессенджерами, например Telegram и Slack:
Файлы с разметкой Markdown имеют расширение .md. Существует огромное количество редакторов, расширений и сервисов, поддерживающих Markdown.

Например, знакомый нам VS Code, а также большинство IDE и редакторов кода поддерживают вёрстку md-файлов с одновременным просмотром результата. Сервис GitHub, с которым мы будем работать, и другие хостинги веб-проектов в режиме просмотра отображают не содержимое файлов README.md, а обработанную разметку. Эти файлы — лицо вашего проекта. В них разработчики описывают, о чём их проект, как работает код, какие действия необходимо произвести, чтобы запустить приложение/программу, и т. д.
Ниже представлен пример отображения разметки на языке Markdown, написанной в файле README.md в репозитории. Вы можете самостоятельно посмотреть на содержимое файла и увидеть, как представленная свёрстанная стартовая страница выглядит в виде текста. Ниже представлен пример отображения разметки на языке Markdown, написанной в файле README.md в репозитории. Вы можете самостоятельно посмотреть на содержимое файла и увидеть, как представленная свёрстанная стартовая страница выглядит в виде текста https://github.com/laravel/laravel. Существуют различные сервисы для создания документов именно с помощью md-разметки, например hackmd.io. 
3. Синтаксис Markdown
В Markdown разделителем абзацев служит пустая строка. Если вы знакомы с языком HTML, то при использовании Markdown можно воспользоваться HTML-тегами. Например, тег <strong> позволяет выделять текст полужирным. Примечание. Список всех HTML-тегов вы можете найти здесь https://html5book.ru/html-tags/. 
ШРИФТ
Очень часто требуется сделать акценты на каких-то элементах текста. Самый простой способ — использовать наклонный (курсивный) и полужирный шрифт.
Наклонное и полужирное начертание в Markdown задаются при помощи символов * и _:
один символ — для наклонного текста (_italic_, *italic*);
два символа — для жирного текста (__strong__, **strong**);
три — для наклонного и жирного одновременно (***жирный и наклонный***).
Пример использования наклонного и полужирного шрифта
ЗАГОЛОВКИ
Любая хорошая статья (а описание проекта можно считать статьёй) должна иметь логические разделы и подразделы. Как правило, начало разделов выделяют заголовками.
В синтаксисе Markdown заголовки отмечаются символом # (от одного до шести штук) в начале строки. Размер шрифта каждого следующего уровня меньше предыдущего:
# Заголовок h1
## Заголовок h2
### Заголовок h3
#### Заголовок h4
##### Заголовок h5
###### Заголовок h6
Пример использования заголовков для оформления статьи
Примечание. Часто при написании текста мы стремимся отцентрировать заголовки разделов. Для этого в Markdown можно воспользоваться тегом <center>:
# <center> Заголовок h1 </center>
Пример использования заголовков с центрированием для оформления статьи
Полезно выделять структуру текста с помощью горизонтальных линий. VS Code автоматически рисует горизонтальную линию после заголовка первого уровня, но можно добавить эту линию вручную с помощью символа ---:
## Заголовок h2
---
## Заголовок h2
Пример использования заголовков с центрированием и горизонтальной линией для оформления статьи
СПИСКИ
Списки — способ представить упорядоченную информацию. Например, это может быть список зависимостей программы (библиотек), которые необходимо установить перед её запуском, или некоторый разработанный нами алгоритм, который мы хотим описать в виде шагов.
Для разметки ненумерованных списков можно использовать символы *, - или + — результат будет один:
+ элемент 1
- элемент 2
* элемент ...
Вложенные пункты создаются двумя или более пробелами перед маркером пункта:
* элемент
  * вложенный элемент 2.1
  * вложенный элемент 2.2
Для разметки нумерованных списков ставится положительное число с точкой:
1. элемент 1
2. элемент 2
  2.1. элемент 3
  2.2. элемент 3
3. элемент 4
Нумерация списка начинается с того числа, которое стоит первым на уровне.
В отличие от ненумерованных списков, в нумерованных перед элементами вложенного списка ставится три пробела.
ССЫЛКИ И ИЗОБРАЖЕНИЯ
При описании своего проекта нередко хочется добавить ссылки на дополнительные источники — статьи, книги, файлы или изображения.
Ссылки создаются комбинацией квадратных и круглых скобок: в квадратных скобках указывается отображаемый текст ссылки, а в круглых — URL-адрес или путь до файла, на который вы ссылаетесь. Ссылки могут быть обычными (без подсказок) или с подсказками, которые всплывают при наведении курсором на ссылку:
без подсказки — [текст ссылки](http://example.com/link);
c подсказкой — [текст ссылки](http://example.com/link "Подсказка").
Пример использования ссылок для оформления списка литературы
Для отображения изображений перед квадратными скобками ставится восклицательный знак:
![](https://i.imgur.com/3uj9teq.png)
В квадратные скобки при этом записывается текст, который отображается, если картинка по каким-то причинам недоступна.
Другой вариант вставки изображений — использовать тег <img> со специальными атрибутами. Например, атрибут src устанавливает источник изображения (путь до файла или URL-ссылка), по которому будет происходит чтение изображения, а атрибуты width и height позволяют установить ширину и высоту изображения в пикселях или процентах от исходного изображения:
<img src=https://i.imgur.com/3uj9teq.png width=500px height=30%>
Пример использования ссылок для вставки изображений
ПРОГРАММНЫЙ КОД И ЦИТИРОВАНИЕ
Когда мы реализуем некоторый проект, представляющий собой набор функций или классов, нам важно донести до конечного пользователя, как работать с нашим проектом, например показать, как использовать ту или иную функцию из нашего кода. То есть нам нужно вставить часть кода в Markdown-файл с описанием.
Для выделения программного кода используется обратный апостроф:
одинарный парный — для вставки строки кода в текст;
двойной парный — для вставки небольшого участка кода, содержащего одинарный апостроф, в текст;
тройной парный — для вставки блока программного кода.
```python
lst = [10, 34, 21, 21, 3]
summa = sum(lst)
```
Для оформления цитат используется знак «больше» (>):
> Цитируемый текст
ФОРМУЛЫ
Когда в проекте есть математическая составляющая, важно отразить её в описании.
Вставка математических формул в Markdown осуществляется с помощью специальной библиотеки KaTeX. Давайте разберём синтаксис.
Чтобы начать использовать KaTeX в Markdown, необходимо воспользоваться символом $. Если обрамить формулу с обеих сторон одним символом $, то её можно встроить в текст, а если двумя — формула автоматически центрируется.
Например, следующий синтаксис
Пусть задано выражение:
$$a = b +c,$$
где $a=0$
Пусть задано выражение:
где 
В формулах встречаются символы разных типов: переменные, операции, функции и др. Иногда переменные могут быть набраны латинскими или греческими буквами. Латинские буквы набираются с клавиатуры, а для греческих есть специальные команды, которые выражаются через символ \. Например:
$\alpha$ — 
$\gamma$ — 
$\sigma$ — 
Степени и индексы набираются с помощью символов ^ и _ соответственно. Если символов, которые нужно поместить в степень или индекс, несколько, то они выделяются фигурными скобками. Например:
$a^2$ — 
$b_{ij}$ — 
$w^{ij}_n$ — 
Для того чтобы создать «двухэтажную» дробь, можно воспользоваться оператором \frac с двумя параметрами, которые передаются в фигурных скобках (числитель и знаменатель). Например:
$\frac{1+x}{n}$ — 
Мы рассмотрели только основные математические операции в Markdown, на самом деле их гораздо больше: суммы, производные, интегралы и т. д. Однако изучать и запоминать их всех вовсе не обязательно. Всегда можно найти, как записать то или иное математическое соотношение, в документации по LaTeX.
Пример оформления математических формул
ПРИМЕР ОФОРМЛЕНИЯ ФАЙЛА README.MD
Давайте рассмотрим процесс создания Markdown-файла на примере описания к проекту.
Напомним, что в качестве мини-проекта берём кейс по очистке данных датасета о домах в Москве от Сбера, который мы рассматривали в модуле «PYTHON-14. Очистка данных».
В том модуле мы рассматривали методы поиска выбросов — метод межквартильного размаха и метод z-отклонений. Для их реализации мы создали функции на Python. Давайте оформим мини-библиотеку, в которую поместим эти функции, чтобы в дальнейшем их импортировать.
GIT/GITHUB
Система управления версиями (англ. Version Control System) — это программное обеспечение, которое позволяет управлять состояниями изменяющейся информации. Благодаря таким системам несколько людей могут работать с файлами, сохранять их версии, перемещаться между версиями и откатывать изменения.
Репозиторий — это хранилище каких-либо данных. В случае с системой контроля версий, репозиторий — это хранилище, содержащее программный код и другие атрибуты (например, данные) IT-проекта.